{
  "address": "0xE6651B246ACa02cbCc9eeA6C3576918188e3356E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_swapGasEstimate",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newEstimate",
          "type": "uint256"
        }
      ],
      "name": "UpdatedGasEstimate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenFrom",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_tokenTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        }
      ],
      "name": "YakAdapterSwap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addedMaintainer",
          "type": "address"
        }
      ],
      "name": "addMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        }
      ],
      "name": "addPools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        }
      ],
      "name": "getPools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "query",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "recoverAVAX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "removedMaintainer",
          "type": "address"
        }
      ],
      "name": "removeMaintainer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_pools",
          "type": "address[]"
        }
      ],
      "name": "removePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "revokeAllowance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_estimate",
          "type": "uint256"
        }
      ],
      "name": "setSwapGasEstimate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "swap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapGasEstimate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x34c0c84f86f9c6a7d5da03a769edd70c091a1e474e6d1ab6f5ad8dc4d18d4454",
  "receipt": {
    "to": null,
    "from": "0x0f01756Bc6183994d90773C8f22E3f44355fFa0E",
    "contractAddress": "0xE6651B246ACa02cbCc9eeA6C3576918188e3356E",
    "transactionIndex": 3,
    "gasUsed": "30108888",
    "logsBloom": "0x
    "blockHash": "0xff522ff434c8b96e02a41a5da657c581dc2be4306fef3a5ecd348e397c3a79f0",
    "transactionHash": "0x34c0c84f86f9c6a7d5da03a769edd70c091a1e474e6d1ab6f5ad8dc4d18d4454",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 151228911,
        "transactionHash": "0x34c0c84f86f9c6a7d5da03a769edd70c091a1e474e6d1ab6f5ad8dc4d18d4454",
        "address": "0xE6651B246ACa02cbCc9eeA6C3576918188e3356E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000f01756bc6183994d90773c8f22e3f44355ffa0e",
          "0x0000000000000000000000000f01756bc6183994d90773c8f22e3f44355ffa0e"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0xff522ff434c8b96e02a41a5da657c581dc2be4306fef3a5ecd348e397c3a79f0"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 151228911,
        "transactionHash": "0x34c0c84f86f9c6a7d5da03a769edd70c091a1e474e6d1ab6f5ad8dc4d18d4454",
        "address": "0xE6651B246ACa02cbCc9eeA6C3576918188e3356E",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95",
          "0x0000000000000000000000000f01756bc6183994d90773c8f22e3f44355ffa0e",
          "0x0000000000000000000000000f01756bc6183994d90773c8f22e3f44355ffa0e"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0xff522ff434c8b96e02a41a5da657c581dc2be4306fef3a5ecd348e397c3a79f0"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 151228911,
        "transactionHash": "0x34c0c84f86f9c6a7d5da03a769edd70c091a1e474e6d1ab6f5ad8dc4d18d4454",
        "address": "0xE6651B246ACa02cbCc9eeA6C3576918188e3356E",
        "topics": [
          "0xf43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a",
          "0x000000000000000000000000e6651b246aca02cbcc9eea6c3576918188e3356e"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000445c0",
        "logIndex": 15,
        "blockHash": "0xff522ff434c8b96e02a41a5da657c581dc2be4306fef3a5ecd348e397c3a79f0"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 151228911,
        "transactionHash": "0x34c0c84f86f9c6a7d5da03a769edd70c091a1e474e6d1ab6f5ad8dc4d18d4454",
        "address": "0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e6651b246aca02cbcc9eea6c3576918188e3356e",
          "0x000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c8"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 16,
        "blockHash": "0xff522ff434c8b96e02a41a5da657c581dc2be4306fef3a5ecd348e397c3a79f0"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 151228911,
        "transactionHash": "0x34c0c84f86f9c6a7d5da03a769edd70c091a1e474e6d1ab6f5ad8dc4d18d4454",
        "address": "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e6651b246aca02cbcc9eea6c3576918188e3356e",
          "0x000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c8"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 17,
        "blockHash": "0xff522ff434c8b96e02a41a5da657c581dc2be4306fef3a5ecd348e397c3a79f0"
      },
      {
        "transactionIndex": 3,
        "blockNumber": 151228911,
        "transactionHash": "0x34c0c84f86f9c6a7d5da03a769edd70c091a1e474e6d1ab6f5ad8dc4d18d4454",
        "address": "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000e6651b246aca02cbcc9eea6c3576918188e3356e",
          "0x000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c8"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 18,
        "blockHash": "0xff522ff434c8b96e02a41a5da657c581dc2be4306fef3a5ecd348e397c3a79f0"
      }
    ],
    "blockNumber": 151228911,
    "cumulativeGasUsed": "33659707",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "BalancerV2Adapter",
    "0xBA12222222228d8Ba445958a75a0704d566BF2C8",
    [
      "0x64541216bAFFFEec8ea535BB71Fbc927831d0595"
    ],
    280000
  ],
  "solcInputHash": "3d31bd7e10bf3531f6c263bc3f164c5d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_swapGasEstimate\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newEstimate\",\"type\":\"uint256\"}],\"name\":\"UpdatedGasEstimate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenFrom\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_tokenTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"}],\"name\":\"YakAdapterSwap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAINTAINER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addedMaintainer\",\"type\":\"address\"}],\"name\":\"addMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"name\":\"addPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"}],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"query\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"recoverAVAX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"removedMaintainer\",\"type\":\"address\"}],\"name\":\"removeMaintainer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_pools\",\"type\":\"address[]\"}],\"name\":\"removePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"revokeAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_estimate\",\"type\":\"uint256\"}],\"name\":\"setSwapGasEstimate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapGasEstimate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/contracts/adapters/BalancerV2Adapter.sol\":\"BalancerV2Adapter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5b35d8e68aeaccc685239bd9dd79b9ba01a0357930f8a3307ab85511733d9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/contracts/YakAdapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interface/IERC20.sol\\\";\\nimport \\\"./lib/SafeERC20.sol\\\";\\nimport \\\"./lib/Maintainable.sol\\\";\\n\\nabstract contract YakAdapter is Maintainable {\\n    using SafeERC20 for IERC20;\\n\\n    event YakAdapterSwap(address indexed _tokenFrom, address indexed _tokenTo, uint256 _amountIn, uint256 _amountOut);\\n    event UpdatedGasEstimate(address indexed _adapter, uint256 _newEstimate);\\n    event Recovered(address indexed _asset, uint256 amount);\\n\\n    uint256 internal constant UINT_MAX = type(uint256).max;\\n    uint256 public swapGasEstimate;\\n    string public name;\\n\\n    constructor(string memory _name, uint256 _gasEstimate) {\\n        setName(_name);\\n        setSwapGasEstimate(_gasEstimate);\\n    }\\n\\n    function setName(string memory _name) internal {\\n        require(bytes(_name).length != 0, \\\"Invalid adapter name\\\");\\n        name = _name;\\n    }\\n\\n    function setSwapGasEstimate(uint256 _estimate) public onlyMaintainer {\\n        require(_estimate != 0, \\\"Invalid gas-estimate\\\");\\n        swapGasEstimate = _estimate;\\n        emit UpdatedGasEstimate(address(this), _estimate);\\n    }\\n\\n    function revokeAllowance(address _token, address _spender) external onlyMaintainer {\\n        IERC20(_token).safeApprove(_spender, 0);\\n    }\\n\\n    function recoverERC20(address _tokenAddress, uint256 _tokenAmount) external onlyMaintainer {\\n        require(_tokenAmount > 0, \\\"YakAdapter: Nothing to recover\\\");\\n        IERC20(_tokenAddress).safeTransfer(msg.sender, _tokenAmount);\\n        emit Recovered(_tokenAddress, _tokenAmount);\\n    }\\n\\n    function recoverAVAX(uint256 _amount) external onlyMaintainer {\\n        require(_amount > 0, \\\"YakAdapter: Nothing to recover\\\");\\n        payable(msg.sender).transfer(_amount);\\n        emit Recovered(address(0), _amount);\\n    }\\n\\n    function query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) external view returns (uint256) {\\n        return _query(_amountIn, _tokenIn, _tokenOut);\\n    }\\n\\n    function swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _fromToken,\\n        address _toToken,\\n        address _to\\n    ) external virtual {\\n        uint256 toBal0 = IERC20(_toToken).balanceOf(_to);\\n        _swap(_amountIn, _amountOut, _fromToken, _toToken, _to);\\n        uint256 diff = IERC20(_toToken).balanceOf(_to) - toBal0;\\n        require(diff >= _amountOut, \\\"Insufficient amount-out\\\");\\n        emit YakAdapterSwap(_fromToken, _toToken, _amountIn, _amountOut);\\n    }\\n\\n    function _returnTo(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) internal {\\n        if (address(this) != _to) IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _fromToken,\\n        address _toToken,\\n        address _to\\n    ) internal virtual;\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view virtual returns (uint256);\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x107a35cefab5921f72dc79a2035e4abedf6975b2569649e2029b694019601b59\",\"license\":\"GPL-3.0-only\"},\"src/contracts/adapters/BalancerV2Adapter.sol\":{\"content\":\"//       \\u255f\\u2557                                                                      \\u2554\\u256c\\n//       \\u255e\\u256c\\u256c                                                                    \\u256c\\u2560\\u256c\\n//      \\u2554\\u2563\\u256c\\u256c\\u256c                                                                  \\u2560\\u2560\\u2560\\u2560\\u2566\\n//     \\u256c\\u256c\\u256c\\u256c\\u256c\\u2569                                                                  \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2551\\u256c\\u256c\\u256c\\u256c\\u256c                                                                    \\u2558\\u2560\\u2560\\u2560\\u2560\\u256c\\n//    \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2552\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c         \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\n//    \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2555    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u255c   \\u2563\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2560\\u2569\\n//     \\u2559\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2554\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2554\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c        \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u2559\\n//               \\u2558\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2552\\u2560\\u2560\\u2560\\u256c\\u2560\\u256c\\u2569\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c       \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2559\\n//                 \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u2569 \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c      \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                  \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2563     \\u2563\\u256c\\u2560\\u2560\\u2560\\u256c\\u256c   \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                   \\u255f\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2569      \\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u2552\\u256c\\u256c\\u2560\\u2560\\u256c\\u2560\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c \\u2563\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c     \\u256c\\u256c\\u256c\\u2560\\u2560\\u2560\\u2560\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u255d\\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u255a\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//                    \\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c    \\u2563\\u256c\\u256c\\u256c\\u256c\\u2560\\u2560\\u2569       \\u2558\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c  \\u2560\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c   \\u2559\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\u256c\\n//\\n\\n// Supports Balancerlike pools\\n\\n// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\nimport \\\"../YakAdapter.sol\\\";\\nimport \\\"../interface/IVault.sol\\\";\\nimport \\\"../interface/IBasePool.sol\\\";\\nimport \\\"../interface/IMinimalSwapInfoPool.sol\\\";\\n\\ncontract BalancerV2Adapter is YakAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    address public vault;\\n\\n    mapping(address => mapping(address => uint128)) internal poolToTokenIndex;\\n    mapping(address => mapping(address => address[])) internal tokensToPools;\\n\\n    constructor(\\n        string memory _name,\\n        address _vault,\\n        address[] memory _pools,\\n        uint256 _swapGasEstimate\\n    ) YakAdapter(_name, _swapGasEstimate) {\\n        vault = _vault;\\n        addPools(_pools);\\n    }\\n\\n    function addPools(address[] memory _pools) public onlyMaintainer {\\n        for (uint128 i = 0; i < _pools.length; i++) {\\n            address pool = _pools[i];\\n            bytes32 poolId = IBasePool(pool).getPoolId();\\n            (IERC20[] memory tokens, , ) = IVault(vault).getPoolTokens(poolId);\\n            for (uint128 j = 0; j < tokens.length; j++) {\\n                address token = address(tokens[j]);\\n                poolToTokenIndex[pool][token] = j;\\n                for (uint128 k = 0; k < tokens.length; k++) {\\n                    if (j != k) {\\n                        tokensToPools[token][address(tokens[k])].push(pool);\\n                        _approveIfNeeded(token, UINT_MAX);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function removePools(address[] memory _pools) public onlyMaintainer {\\n        for (uint256 i = 0; i < _pools.length; i++) {\\n            address pool = _pools[i];\\n            bytes32 poolId = IBasePool(pool).getPoolId();\\n            (IERC20[] memory tokens, , ) = IVault(vault).getPoolTokens(poolId);\\n            for (uint128 j = 0; j < tokens.length; j++) {\\n                address token = address(tokens[j]);\\n                for (uint128 k = 0; k < tokens.length; k++) {\\n                    if (j != k) {\\n                        address[] memory currentPools = tokensToPools[token][address(tokens[k])];\\n                        for (uint128 l = 0; l < currentPools.length; l++) {\\n                            if (currentPools[l] == pool) {\\n                                delete currentPools[l];\\n                            }\\n                        }\\n                        tokensToPools[token][address(tokens[k])] = currentPools;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function getPools(address tokenIn, address tokenOut) public view returns (address[] memory) {\\n        return tokensToPools[tokenIn][tokenOut];\\n    }\\n\\n    function _approveIfNeeded(address _tokenIn, uint256 _amount) internal {\\n        uint256 allowance = IERC20(_tokenIn).allowance(address(this), vault);\\n        if (allowance < _amount) {\\n            IERC20(_tokenIn).safeApprove(vault, _amount);\\n        }\\n    }\\n\\n    function _query(\\n        uint256 _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) internal view override returns (uint256) {\\n        if (_amountIn == 0 || _tokenIn == _tokenOut) {\\n            return 0;\\n        }\\n\\n        address[] memory pools = getPools(_tokenIn, _tokenOut);\\n        if (pools.length == 0) {\\n            return 0;\\n        }\\n\\n        (, uint256 amountOut) = _getBestPoolForSwap(pools, _tokenIn, _tokenOut, _amountIn);\\n        return amountOut;\\n    }\\n\\n    function _swap(\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _tokenIn,\\n        address _tokenOut,\\n        address to\\n    ) internal override {\\n        address[] memory pools = getPools(_tokenIn, _tokenOut);\\n\\n        require(pools.length > 0, \\\"No pools for swapping\\\");\\n\\n        (address pool, ) = _getBestPoolForSwap(pools, _tokenIn, _tokenOut, _amountIn);\\n\\n        require(pool != address(0), \\\"Undefined pool\\\");\\n\\n        IVault.SingleSwap memory swap;\\n        swap.poolId = IBasePool(pool).getPoolId();\\n        swap.kind = IVault.SwapKind.GIVEN_IN;\\n        swap.assetIn = _tokenIn;\\n        swap.assetOut = _tokenOut;\\n        swap.amount = _amountIn;\\n        swap.userData = \\\"0x\\\";\\n\\n        IVault.FundManagement memory fund;\\n        fund.sender = address(this);\\n        fund.recipient = payable(to);\\n        fund.fromInternalBalance = false;\\n        fund.toInternalBalance = false;\\n\\n        IVault(vault).swap(swap, fund, _amountOut, block.timestamp);\\n    }\\n\\n    function _getBestPoolForSwap(\\n        address[] memory pools,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn\\n    ) internal view returns (address bestPool, uint256 amountOut) {\\n        amountOut = 0;\\n        bestPool = address(0);\\n        for (uint128 i; i < pools.length; i++) {\\n            address pool = pools[i];\\n            if (pool == address(0)) {\\n                continue;\\n            }\\n            IPoolSwapStructs.SwapRequest memory request;\\n            request.poolId = IBasePool(pool).getPoolId();\\n            request.kind = IVault.SwapKind.GIVEN_IN;\\n            request.tokenIn = IERC20(_tokenIn);\\n            request.tokenOut = IERC20(_tokenOut);\\n            request.amount = _amountIn;\\n            request.userData = \\\"0x\\\";\\n            uint256 newAmountOut = _getAmountOut(request, pool);\\n            if (newAmountOut > amountOut) {\\n                amountOut = newAmountOut;\\n                bestPool = pool;\\n            }\\n        }\\n    }\\n\\n    function _getAmountOut(IPoolSwapStructs.SwapRequest memory request, address pool)\\n        internal\\n        view\\n        returns (uint256 amountOut)\\n    {\\n        // Based on https://github.com/balancer-labs/balancer-v2-monorepo/blob/master/pkg/vault/contracts/Swaps.sol#L275\\n        (, uint256[] memory balances, ) = IVault(vault).getPoolTokens(request.poolId);\\n        uint256 tokenInTotal = balances[poolToTokenIndex[pool][address(request.tokenIn)]];\\n        uint256 tokenOutTotal = balances[poolToTokenIndex[pool][address(request.tokenOut)]];\\n        amountOut = _getAmountOutSafe(request, tokenInTotal, tokenOutTotal, pool);\\n    }\\n\\n    function _getAmountOutSafe(\\n        IPoolSwapStructs.SwapRequest memory request,\\n        uint256 tokenInTotal,\\n        uint256 tokenOutTotal,\\n        address pool\\n    ) internal view returns (uint256) {\\n        try IMinimalSwapInfoPool(pool).onSwap(request, tokenInTotal, tokenOutTotal) returns (uint256 amountOut) {\\n            return amountOut;\\n        } catch {}\\n    }\\n}\\n\",\"keccak256\":\"0x9720bc301b72691be86ddcf3a8e206096350daf379edae7ab3b9b301690f3dcb\",\"license\":\"GPL-3.0-only\"},\"src/contracts/interface/IBasePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IPoolSwapStructs.sol\\\";\\n\\ninterface IBasePool is IPoolSwapStructs {\\n    function getPoolId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc6b3254c58e38a8a0410fe6f58e149b3a6721bb212b5ebac69cf73fec46dc184\",\"license\":\"MIT\"},\"src/contracts/interface/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    event Approval(address, address, uint256);\\n    event Transfer(address, address, uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function nonces(address) external view returns (uint256); // Only tokens that support permit\\n\\n    function permit(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        uint8,\\n        bytes32,\\n        bytes32\\n    ) external; // Only tokens that support permit\\n\\n    function swap(address, uint256) external; // Only Avalanche bridge tokens\\n\\n    function swapSupply(address) external view returns (uint256); // Only Avalanche bridge tokens\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7b2d64b5cf6350bd5590f96eaea048fcf0182b50fc22f1075adeed1a98325932\",\"license\":\"MIT\"},\"src/contracts/interface/IMinimalSwapInfoPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBasePool.sol\\\";\\n\\ninterface IMinimalSwapInfoPool is IBasePool {\\n    function onSwap(\\n        SwapRequest memory swapRequest,\\n        uint256 currentBalanceTokenIn,\\n        uint256 currentBalanceTokenOut\\n    ) external view returns (uint256 amount);\\n}\\n\",\"keccak256\":\"0x9c01182800df94716af7a86d69bb6ad563c5f99d9e51e619109c3a86beb684d9\",\"license\":\"MIT\"},\"src/contracts/interface/IPoolSwapStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IVault.sol\\\";\\n\\ninterface IPoolSwapStructs {\\n    struct SwapRequest {\\n        IVault.SwapKind kind;\\n        IERC20 tokenIn;\\n        IERC20 tokenOut;\\n        uint256 amount;\\n        bytes32 poolId;\\n        uint256 lastChangeBlock;\\n        address from;\\n        address to;\\n        bytes userData;\\n    }\\n}\\n\",\"keccak256\":\"0xfebf103280e30701430ecd3780bfffba7279f8395393f8ede1a1777e00ea968e\",\"license\":\"MIT\"},\"src/contracts/interface/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IVault {\\n    enum SwapKind {\\n        GIVEN_IN,\\n        GIVEN_OUT\\n    }\\n\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        address assetIn;\\n        address assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    function queryBatchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        address[] memory assets,\\n        FundManagement memory funds\\n    ) external returns (int256[] memory assetDeltas);\\n}\\n\",\"keccak256\":\"0xbd448fa34dd5cfc23565cc1496a3ed5259e9ea6d13654266f6e3a86d6156e95b\",\"license\":\"MIT\"},\"src/contracts/lib/Maintainable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @dev Contract module which extends the basic access control mechanism of Ownable\\n * to include many maintainers, whom only the owner (DEFAULT_ADMIN_ROLE) may add and\\n * remove.\\n *\\n * By default, the owner account will be the one that deploys the contract. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available this modifier:\\n * `onlyMaintainer`, which can be applied to your functions to restrict their use to\\n * the accounts with the role of maintainer.\\n */\\n\\nabstract contract Maintainable is Context, AccessControl {\\n    bytes32 public constant MAINTAINER_ROLE = keccak256(\\\"MAINTAINER_ROLE\\\");\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        // members of the DEFAULT_ADMIN_ROLE alone may revoke and grant role membership\\n        _setupRole(DEFAULT_ADMIN_ROLE, msgSender);\\n        _setupRole(MAINTAINER_ROLE, msgSender);\\n    }\\n\\n    function addMaintainer(address addedMaintainer) public virtual {\\n        grantRole(MAINTAINER_ROLE, addedMaintainer);\\n    }\\n\\n    function removeMaintainer(address removedMaintainer) public virtual {\\n        revokeRole(MAINTAINER_ROLE, removedMaintainer);\\n    }\\n\\n    function renounceRole(bytes32 role) public virtual {\\n        address msgSender = _msgSender();\\n        renounceRole(role, msgSender);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual {\\n        address msgSender = _msgSender();\\n        grantRole(DEFAULT_ADMIN_ROLE, newOwner);\\n        renounceRole(DEFAULT_ADMIN_ROLE, msgSender);\\n    }\\n\\n    modifier onlyMaintainer() {\\n        address msgSender = _msgSender();\\n        require(hasRole(MAINTAINER_ROLE, msgSender), \\\"Maintainable: Caller is not a maintainer\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xcf17b3f89386f661ee6230c9774bc88a119f2385111279497bbb443209ad6bb2\",\"license\":\"MIT\"},\"src/contracts/lib/SafeERC20.sol\":{\"content\":\"// This is a simplified version of OpenZepplin's SafeERC20 library\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../interface/IERC20.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves.\\n\\n        // A Solidity high level call has three parts:\\n        //  1. The target address is checked to verify it contains contract code\\n        //  2. The call itself is made, and success asserted\\n        //  3. The return value is decoded, which in turn checks the size of the returned data.\\n        // solhint-disable-next-line max-line-length\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        require(success, \\\"SafeERC20: low-level call failed\\\");\\n\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2d77601f615804eb7471002f23f9a4593f86ac295e7353c2e7545f51d4f81728\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003bc938038062003bc9833981016040819052620000349162000c44565b83813362000044600082620000b9565b620000707f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582620000b9565b506200007c82620000c9565b620000878162000132565b5050600380546001600160a01b0319166001600160a01b038516179055620000af826200022e565b5050505062000e65565b620000c5828262000598565b5050565b80516200011d5760405162461bcd60e51b815260206004820152601460248201527f496e76616c69642061646170746572206e616d6500000000000000000000000060448201526064015b60405180910390fd5b8051620000c590600290602084019062000988565b33600081815260008051602062003b89833981519152602052604090205460ff16620001a15760405162461bcd60e51b8152602060048201526028602482015260008051602062003ba983398151915260448201526734b73a30b4b732b960c11b606482015260840162000114565b81620001f05760405162461bcd60e51b815260206004820152601460248201527f496e76616c6964206761732d657374696d617465000000000000000000000000604482015260640162000114565b600182905560405182815230907ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a9060200160405180910390a25050565b33600081815260008051602062003b89833981519152602052604090205460ff166200029d5760405162461bcd60e51b8152602060048201526028602482015260008051602062003ba983398151915260448201526734b73a30b4b732b960c11b606482015260840162000114565b60005b8251816001600160801b031610156200059357600083826001600160801b031681518110620002df57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156200032557600080fd5b505afa1580156200033a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000360919062000c2b565b600354604051631f29a8cd60e31b8152600481018390529192506000916001600160a01b039091169063f94d46689060240160006040518083038186803b158015620003ab57600080fd5b505afa158015620003c0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620003ea919081019062000b26565b5050905060005b8151816001600160801b031610156200057957600082826001600160801b0316815181106200043057634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b038781166000908152600484526040808220928416825291909352822080546001600160801b0319166001600160801b03861617905591505b8351816001600160801b031610156200056157806001600160801b0316836001600160801b0316146200054c576001600160a01b0382166000908152600560205260408120855190919086906001600160801b038516908110620004f057634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b039081168352828201939093526040909101600090812080546001810182559082529190200180546001600160a01b0319169188169190911790556200054c8260001962000638565b80620005588162000e02565b9150506200047c565b50508080620005709062000e02565b915050620003f1565b5050505080806200058a9062000e02565b915050620002a0565b505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16620000c5576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620005f43390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600354604051636eb1769f60e11b81523060048201526001600160a01b03918216602482015260009184169063dd62ed3e9060440160206040518083038186803b1580156200068657600080fd5b505afa1580156200069b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620006c1919062000c2b565b905081811015620005935760035462000593906001600160a01b03858116911684620006f4602090811b620015fb17901c565b801580620007825750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b1580156200074557600080fd5b505afa1580156200075a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000780919062000c2b565b155b620007f65760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606482015260840162000114565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620005939185916200084e16565b600080836001600160a01b0316836040516200086b919062000d1f565b6000604051808303816000865af19150503d8060008114620008aa576040519150601f19603f3d011682016040523d82523d6000602084013e620008af565b606091505b509150915081620009035760405162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564604482015260640162000114565b80511562000982578080602001905181019062000921919062000c02565b620009825760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840162000114565b50505050565b828054620009969062000dc5565b90600052602060002090601f016020900481019282620009ba576000855562000a05565b82601f10620009d557805160ff191683800117855562000a05565b8280016001018555821562000a05579182015b8281111562000a05578251825591602001919060010190620009e8565b5062000a1392915062000a17565b5090565b5b8082111562000a13576000815560010162000a18565b805162000a3b8162000e4c565b919050565b600082601f83011262000a51578081fd5b8151602062000a6a62000a648362000d70565b62000d3d565b80838252828201915082860187848660051b890101111562000a8a578586fd5b855b8581101562000ab557815162000aa28162000e4c565b8452928401929084019060010162000a8c565b5090979650505050505050565b600082601f83011262000ad3578081fd5b8151602062000ae662000a648362000d70565b80838252828201915082860187848660051b890101111562000b06578586fd5b855b8581101562000ab55781518452928401929084019060010162000b08565b60008060006060848603121562000b3b578283fd5b83516001600160401b038082111562000b52578485fd5b818601915086601f83011262000b66578485fd5b8151602062000b7962000a648362000d70565b8083825282820191508286018b848660051b890101111562000b9957898afd5b8996505b8487101562000bc857805162000bb38162000e4c565b83526001969096019591830191830162000b9d565b509189015191975090935050508082111562000be2578384fd5b5062000bf18682870162000ac2565b925050604084015190509250925092565b60006020828403121562000c14578081fd5b8151801515811462000c24578182fd5b9392505050565b60006020828403121562000c3d578081fd5b5051919050565b6000806000806080858703121562000c5a578081fd5b84516001600160401b038082111562000c71578283fd5b818701915087601f83011262000c85578283fd5b81518181111562000c9a5762000c9a62000e36565b62000caf601f8201601f191660200162000d3d565b81815289602083860101111562000cc4578485fd5b62000cd782602083016020870162000d96565b965062000ce990506020880162000a2e565b9450604087015191508082111562000cff578283fd5b5062000d0e8782880162000a40565b606096909601519497939650505050565b6000825162000d3381846020870162000d96565b9190910192915050565b604051601f8201601f191681016001600160401b038111828210171562000d685762000d6862000e36565b604052919050565b60006001600160401b0382111562000d8c5762000d8c62000e36565b5060051b60200190565b60005b8381101562000db357818101518382015260200162000d99565b83811115620009825750506000910152565b600181811c9082168062000dda57607f821691505b6020821081141562000dfc57634e487b7160e01b600052602260045260246000fd5b50919050565b60006001600160801b038281168082141562000e2c57634e487b7160e01b83526011600452602483fd5b6001019392505050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811462000e6257600080fd5b50565b612d148062000e756000396000f3fe60806040526004361061018f5760003560e01c80638980f11f116100d6578063d8baf7cf1161007f578063f2fde38b11610059578063f2fde38b1461048e578063f8742254146104ae578063fbfa77cf146104e257600080fd5b8063d8baf7cf1461042e578063eab90da61461044e578063ef99893a1461046e57600080fd5b8063a217fddf116100b0578063a217fddf146103d9578063b36a4ab1146103ee578063d547741f1461040e57600080fd5b80638980f11f146103555780638bb9c5bf1461037557806391d148541461039557600080fd5b80634ebb7916116101385780636b453c1f116101125780636b453c1f146102f55780637ae267731461031557806384a33e631461033557600080fd5b80634ebb7916146102925780635b1dc86f146102b257806369cff80d146102df57600080fd5b80632f2ff15d116101695780632f2ff15d1461023057806336568abe146102525780634b1641401461027257600080fd5b806301ffc9a71461019b57806306fdde03146101d0578063248a9ca3146101f257600080fd5b3661019657005b600080fd5b3480156101a757600080fd5b506101bb6101b63660046127a4565b61051a565b60405190151581526020015b60405180910390f35b3480156101dc57600080fd5b506101e5610583565b6040516101c791906129a3565b3480156101fe57600080fd5b5061022261020d366004612750565b60009081526020819052604090206001015490565b6040519081526020016101c7565b34801561023c57600080fd5b5061025061024b366004612780565b610611565b005b34801561025e57600080fd5b5061025061026d366004612780565b61063b565b34801561027e57600080fd5b5061025061028d3660046125c5565b6106cc565b34801561029e57600080fd5b506102506102ad366004612750565b610b43565b3480156102be57600080fd5b506102d26102cd366004612562565b610c8b565b6040516101c79190612956565b3480156102eb57600080fd5b5061022260015481565b34801561030157600080fd5b50610250610310366004612546565b610d0e565b34801561032157600080fd5b50610250610330366004612562565b610d3b565b34801561034157600080fd5b50610250610350366004612750565b610ddf565b34801561036157600080fd5b5061025061037036600461259a565b610ef2565b34801561038157600080fd5b50610250610390366004612750565b61102d565b3480156103a157600080fd5b506101bb6103b0366004612780565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b3480156103e557600080fd5b50610222600081565b3480156103fa57600080fd5b506102506104093660046125c5565b611038565b34801561041a57600080fd5b50610250610429366004612780565b6113b9565b34801561043a57600080fd5b50610250610449366004612546565b6113de565b34801561045a57600080fd5b5061025061046936600461280d565b611408565b34801561047a57600080fd5b506102226104893660046127cc565b6115cd565b34801561049a57600080fd5b506102506104a9366004612546565b6115e4565b3480156104ba57600080fd5b506102227f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9581565b3480156104ee57600080fd5b50600354610502906001600160a01b031681565b6040516001600160a01b0390911681526020016101c7565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061057d57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6002805461059090612c20565b80601f01602080910402602001604051908101604052809291908181526020018280546105bc90612c20565b80156106095780601f106105de57610100808354040283529160200191610609565b820191906000526020600020905b8154815290600101906020018083116105ec57829003601f168201915b505050505081565b60008281526020819052604090206001015461062c81611787565b6106368383611791565b505050565b6001600160a01b03811633146106be5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6106c8828261182f565b5050565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff1661075b5760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016106b5565b60005b825181101561063657600083828151811061078957634e487b7160e01b600052603260045260246000fd5b602002602001015190506000816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156107ce57600080fd5b505afa1580156107e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108069190612768565b600354604051631f29a8cd60e31b8152600481018390529192506000916001600160a01b039091169063f94d46689060240160006040518083038186803b15801561085057600080fd5b505afa158015610864573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261088c9190810190612661565b5050905060005b8151816001600160801b03161015610b2c57600082826001600160801b0316815181106108d057634e487b7160e01b600052603260045260246000fd5b6020026020010151905060005b8351816001600160801b03161015610b1757806001600160801b0316836001600160801b031614610b05576001600160a01b03821660009081526005602052604081208551829087906001600160801b03861690811061094d57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156109c957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109ab575b5050505050905060005b8151816001600160801b03161015610a8057876001600160a01b031682826001600160801b031681518110610a1857634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415610a6e5781816001600160801b031681518110610a5857634e487b7160e01b600052603260045260246000fd5b6020026020010160006001600160a01b03168152505b80610a7881612c5b565b9150506109d3565b506001600160a01b0383166000908152600560205260408120865183929088906001600160801b038716908110610ac757634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000209080519060200190610b02929190612450565b50505b80610b0f81612c5b565b9150506108dd565b50508080610b2490612c5b565b915050610893565b505050508080610b3b90612c82565b91505061075e565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610bd25760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016106b5565b60008211610c225760405162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f766572000060448201526064016106b5565b604051339083156108fc029084906000818181858888f19350505050158015610c4f573d6000803e3d6000fd5b506040518281526000907f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28906020015b60405180910390a25050565b6001600160a01b038083166000908152600560209081526040808320938516835292815290829020805483518184028101840190945280845260609392830182828015610d0157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ce3575b5050505050905092915050565b610d387f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610611565b50565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610dca5760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016106b5565b6106366001600160a01b0384168360006115fb565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610e6e5760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016106b5565b81610ebb5760405162461bcd60e51b815260206004820152601460248201527f496e76616c6964206761732d657374696d61746500000000000000000000000060448201526064016106b5565b600182905560405182815230907ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a90602001610c7f565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610f815760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016106b5565b60008211610fd15760405162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f766572000060448201526064016106b5565b610fe56001600160a01b03841633846118ae565b826001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa288360405161102091815260200190565b60405180910390a2505050565b336106c8828261063b565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff166110c75760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016106b5565b60005b8251816001600160801b0316101561063657600083826001600160801b03168151811061110757634e487b7160e01b600052603260045260246000fd5b602002602001015190506000816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561114c57600080fd5b505afa158015611160573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111849190612768565b600354604051631f29a8cd60e31b8152600481018390529192506000916001600160a01b039091169063f94d46689060240160006040518083038186803b1580156111ce57600080fd5b505afa1580156111e2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261120a9190810190612661565b5050905060005b8151816001600160801b031610156113a257600082826001600160801b03168151811061124e57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b038781166000908152600484526040808220928416825291909352822080546fffffffffffffffffffffffffffffffff19166001600160801b03861617905591505b8351816001600160801b0316101561138d57806001600160801b0316836001600160801b03161461137b576001600160a01b0382166000908152600560205260408120855190919086906001600160801b03851690811061131457634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b0390811683528282019390935260409091016000908120805460018101825590825291902001805473ffffffffffffffffffffffffffffffffffffffff191691881691909117905561137b826000196118f7565b8061138581612c5b565b9150506112a3565b5050808061139a90612c5b565b915050611211565b5050505080806113b190612c5b565b9150506110ca565b6000828152602081905260409020600101546113d481611787565b610636838361182f565b610d387f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95826113b9565b6040516370a0823160e01b81526001600160a01b038281166004830152600091908416906370a082319060240160206040518083038186803b15801561144d57600080fd5b505afa158015611461573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114859190612768565b905061149486868686866119a0565b6040516370a0823160e01b81526001600160a01b03838116600483015260009183918616906370a082319060240160206040518083038186803b1580156114da57600080fd5b505afa1580156114ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115129190612768565b61151c9190612bc6565b90508581101561156e5760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e7420616d6f756e742d6f757400000000000000000060448201526064016106b5565b836001600160a01b0316856001600160a01b03167fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa89896040516115bc929190918252602082015260400190565b60405180910390a350505050505050565b60006115da848484611c32565b90505b9392505050565b336115f0600083610611565b6106c860008261063b565b8015806116845750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561164a57600080fd5b505afa15801561165e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116829190612768565b155b6116f65760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016106b5565b6040516001600160a01b0383166024820152604481018290526106369084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152611c9a565b610d388133611ddc565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166106c8576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556117eb3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16156106c8576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6040516001600160a01b0383166024820152604481018290526106369084907fa9059cbb000000000000000000000000000000000000000000000000000000009060640161173b565b600354604051636eb1769f60e11b81523060048201526001600160a01b03918216602482015260009184169063dd62ed3e9060440160206040518083038186803b15801561194457600080fd5b505afa158015611958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197c9190612768565b90508181101561063657600354610636906001600160a01b038581169116846115fb565b60006119ac8484610c8b565b905060008151116119ff5760405162461bcd60e51b815260206004820152601560248201527f4e6f20706f6f6c7320666f72207377617070696e67000000000000000000000060448201526064016106b5565b6000611a0d8286868a611e5a565b5090506001600160a01b038116611a665760405162461bcd60e51b815260206004820152600e60248201527f556e646566696e656420706f6f6c00000000000000000000000000000000000060448201526064016106b5565b611ab26040805160c0810190915260008082526020820190815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001606081525090565b816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b158015611aeb57600080fd5b505afa158015611aff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b239190612768565b8152600060208083018290526001600160a01b0388811660408086019190915288821660608087019190915260808087018e9052825180840184526002815261060f60f31b8187015260a0880152825190810183529384018590528301939093523082528681168284015260035492517f52bbbe29000000000000000000000000000000000000000000000000000000008152919216906352bbbe2990611bd490859085908d9042906004016129b6565b602060405180830381600087803b158015611bee57600080fd5b505af1158015611c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c269190612768565b50505050505050505050565b6000831580611c525750816001600160a01b0316836001600160a01b0316145b15611c5f575060006115dd565b6000611c6b8484610c8b565b9050805160001415611c815760009150506115dd565b6000611c8f82868689611e5a565b979650505050505050565b600080836001600160a01b031683604051611cb591906128b9565b6000604051808303816000865af19150503d8060008114611cf2576040519150601f19603f3d011682016040523d82523d6000602084013e611cf7565b606091505b509150915081611d495760405162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460448201526064016106b5565b805115611dd65780806020019051810190611d649190612730565b611dd65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016106b5565b50505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166106c857611e18816001600160a01b0316601461200e565b611e2383602061200e565b604051602001611e349291906128d5565b60408051601f198184030181529082905262461bcd60e51b82526106b5916004016129a3565b600080805b8651816001600160801b0316101561200457600087826001600160801b031681518110611e9c57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006001600160a01b0316816001600160a01b03161415611ec75750611ff2565b604080516101208101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820192909252610100810191909152816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b158015611f4b57600080fd5b505afa158015611f5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f839190612768565b608082015260008082526001600160a01b038981166020808501919091529089166040808501919091526060840189905280518082019091526002815261060f60f31b91810191909152610100830152611fdd8284612235565b905084811115611fee578094508295505b5050505b80611ffc81612c5b565b915050611e5f565b5094509492505050565b6060600061201d836002612ba7565b612028906002612b8f565b67ffffffffffffffff81111561204e57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612078576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106120bd57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061211657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061213a846002612ba7565b612145906001612b8f565b90505b60018111156121e6577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061219457634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106121b857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936121df81612c09565b9050612148565b5083156115dd5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106b5565b6003546080830151604051631f29a8cd60e31b815260009283926001600160a01b039091169163f94d4668916122719160040190815260200190565b60006040518083038186803b15801561228957600080fd5b505afa15801561229d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122c59190810190612661565b506001600160a01b0380861660009081526004602090815260408083208a830151909416835292905290812054825192945090925083916001600160801b0390911690811061232457634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b0380871660009081526004845260408082208a820151909316825291909352822054845191935084916001600160801b0390911690811061238857634e487b7160e01b600052603260045260246000fd5b6020026020010151905061239e868383886123a8565b9695505050505050565b6040517f9d2c110c0000000000000000000000000000000000000000000000000000000081526000906001600160a01b03831690639d2c110c906123f490889088908890600401612a73565b60206040518083038186803b15801561240c57600080fd5b505afa92505050801561243c575060408051601f3d908101601f1916820190925261243991810190612768565b60015b61244557612448565b90505b949350505050565b8280548282559060005260206000209081019282156124b2579160200282015b828111156124b2578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909116178255602090920191600190910190612470565b506124be9291506124c2565b5090565b5b808211156124be57600081556001016124c3565b600082601f8301126124e7578081fd5b815160206124fc6124f783612b6b565b612b3a565b80838252828201915082860187848660051b890101111561251b578586fd5b855b858110156125395781518452928401929084019060010161251d565b5090979650505050505050565b600060208284031215612557578081fd5b81356115dd81612cc9565b60008060408385031215612574578081fd5b823561257f81612cc9565b9150602083013561258f81612cc9565b809150509250929050565b600080604083850312156125ac578182fd5b82356125b781612cc9565b946020939093013593505050565b600060208083850312156125d7578182fd5b823567ffffffffffffffff8111156125ed578283fd5b8301601f810185136125fd578283fd5b803561260b6124f782612b6b565b80828252848201915084840188868560051b870101111561262a578687fd5b8694505b8385101561265557803561264181612cc9565b83526001949094019391850191850161262e565b50979650505050505050565b600080600060608486031215612675578081fd5b835167ffffffffffffffff8082111561268c578283fd5b818601915086601f83011261269f578283fd5b815160206126af6124f783612b6b565b8083825282820191508286018b848660051b89010111156126ce578788fd5b8796505b848710156126f95780516126e581612cc9565b8352600196909601959183019183016126d2565b5091890151919750909350505080821115612712578283fd5b5061271f868287016124d7565b925050604084015190509250925092565b600060208284031215612741578081fd5b815180151581146115dd578182fd5b600060208284031215612761578081fd5b5035919050565b600060208284031215612779578081fd5b5051919050565b60008060408385031215612792578182fd5b82359150602083013561258f81612cc9565b6000602082840312156127b5578081fd5b81356001600160e01b0319811681146115dd578182fd5b6000806000606084860312156127e0578081fd5b8335925060208401356127f281612cc9565b9150604084013561280281612cc9565b809150509250925092565b600080600080600060a08688031215612824578283fd5b8535945060208601359350604086013561283d81612cc9565b9250606086013561284d81612cc9565b9150608086013561285d81612cc9565b809150509295509295909350565b60008151808452612883816020860160208601612bdd565b601f01601f19169290920160200192915050565b600281106128b557634e487b7160e01b600052602160045260246000fd5b9052565b600082516128cb818460208701612bdd565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161290d816017850160208801612bdd565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161294a816028840160208801612bdd565b01602801949350505050565b6020808252825182820181905260009190848201906040850190845b818110156129975783516001600160a01b031683529284019291840191600101612972565b50909695505050505050565b6020815260006115dd602083018461286b565b60e08152845160e0820152600060208601516129d6610100840182612897565b5060408601516001600160a01b03908116610120840152606087015116610140830152608086015161016083015260a086015160c0610180840152612a1f6101a084018261286b565b915050612a6160208301866001600160a01b03808251168352602082015115156020840152806040830151166040840152506060810151151560608301525050565b60a082019390935260c0015292915050565b60608152612a85606082018551612897565b60006020850151612aa160808401826001600160a01b03169052565b5060408501516001600160a01b03811660a084015250606085015160c0830152608085015160e083015260a0850151610100818185015260c08701519150610120612af6818601846001600160a01b03169052565b60e08801516001600160a01b0316610140860152908701516101608501919091529050612b2761018084018261286b565b6020840195909552505060400152919050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612b6357612b63612cb3565b604052919050565b600067ffffffffffffffff821115612b8557612b85612cb3565b5060051b60200190565b60008219821115612ba257612ba2612c9d565b500190565b6000816000190483118215151615612bc157612bc1612c9d565b500290565b600082821015612bd857612bd8612c9d565b500390565b60005b83811015612bf8578181015183820152602001612be0565b83811115611dd65750506000910152565b600081612c1857612c18612c9d565b506000190190565b600181811c90821680612c3457607f821691505b60208210811415612c5557634e487b7160e01b600052602260045260246000fd5b50919050565b60006001600160801b0380831681811415612c7857612c78612c9d565b6001019392505050565b6000600019821415612c9657612c96612c9d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610d3857600080fdfea2646970667358221220480729bb7d86aac270d3af2f7c609ddbe066f548b13a3b2223c34b0fc518245c64736f6c63430008040033a54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d394d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d61",
  "deployedBytecode": "0x60806040526004361061018f5760003560e01c80638980f11f116100d6578063d8baf7cf1161007f578063f2fde38b11610059578063f2fde38b1461048e578063f8742254146104ae578063fbfa77cf146104e257600080fd5b8063d8baf7cf1461042e578063eab90da61461044e578063ef99893a1461046e57600080fd5b8063a217fddf116100b0578063a217fddf146103d9578063b36a4ab1146103ee578063d547741f1461040e57600080fd5b80638980f11f146103555780638bb9c5bf1461037557806391d148541461039557600080fd5b80634ebb7916116101385780636b453c1f116101125780636b453c1f146102f55780637ae267731461031557806384a33e631461033557600080fd5b80634ebb7916146102925780635b1dc86f146102b257806369cff80d146102df57600080fd5b80632f2ff15d116101695780632f2ff15d1461023057806336568abe146102525780634b1641401461027257600080fd5b806301ffc9a71461019b57806306fdde03146101d0578063248a9ca3146101f257600080fd5b3661019657005b600080fd5b3480156101a757600080fd5b506101bb6101b63660046127a4565b61051a565b60405190151581526020015b60405180910390f35b3480156101dc57600080fd5b506101e5610583565b6040516101c791906129a3565b3480156101fe57600080fd5b5061022261020d366004612750565b60009081526020819052604090206001015490565b6040519081526020016101c7565b34801561023c57600080fd5b5061025061024b366004612780565b610611565b005b34801561025e57600080fd5b5061025061026d366004612780565b61063b565b34801561027e57600080fd5b5061025061028d3660046125c5565b6106cc565b34801561029e57600080fd5b506102506102ad366004612750565b610b43565b3480156102be57600080fd5b506102d26102cd366004612562565b610c8b565b6040516101c79190612956565b3480156102eb57600080fd5b5061022260015481565b34801561030157600080fd5b50610250610310366004612546565b610d0e565b34801561032157600080fd5b50610250610330366004612562565b610d3b565b34801561034157600080fd5b50610250610350366004612750565b610ddf565b34801561036157600080fd5b5061025061037036600461259a565b610ef2565b34801561038157600080fd5b50610250610390366004612750565b61102d565b3480156103a157600080fd5b506101bb6103b0366004612780565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b3480156103e557600080fd5b50610222600081565b3480156103fa57600080fd5b506102506104093660046125c5565b611038565b34801561041a57600080fd5b50610250610429366004612780565b6113b9565b34801561043a57600080fd5b50610250610449366004612546565b6113de565b34801561045a57600080fd5b5061025061046936600461280d565b611408565b34801561047a57600080fd5b506102226104893660046127cc565b6115cd565b34801561049a57600080fd5b506102506104a9366004612546565b6115e4565b3480156104ba57600080fd5b506102227f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9581565b3480156104ee57600080fd5b50600354610502906001600160a01b031681565b6040516001600160a01b0390911681526020016101c7565b60006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061057d57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b6002805461059090612c20565b80601f01602080910402602001604051908101604052809291908181526020018280546105bc90612c20565b80156106095780601f106105de57610100808354040283529160200191610609565b820191906000526020600020905b8154815290600101906020018083116105ec57829003601f168201915b505050505081565b60008281526020819052604090206001015461062c81611787565b6106368383611791565b505050565b6001600160a01b03811633146106be5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6106c8828261182f565b5050565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff1661075b5760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016106b5565b60005b825181101561063657600083828151811061078957634e487b7160e01b600052603260045260246000fd5b602002602001015190506000816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b1580156107ce57600080fd5b505afa1580156107e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108069190612768565b600354604051631f29a8cd60e31b8152600481018390529192506000916001600160a01b039091169063f94d46689060240160006040518083038186803b15801561085057600080fd5b505afa158015610864573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261088c9190810190612661565b5050905060005b8151816001600160801b03161015610b2c57600082826001600160801b0316815181106108d057634e487b7160e01b600052603260045260246000fd5b6020026020010151905060005b8351816001600160801b03161015610b1757806001600160801b0316836001600160801b031614610b05576001600160a01b03821660009081526005602052604081208551829087906001600160801b03861690811061094d57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156109c957602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109ab575b5050505050905060005b8151816001600160801b03161015610a8057876001600160a01b031682826001600160801b031681518110610a1857634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03161415610a6e5781816001600160801b031681518110610a5857634e487b7160e01b600052603260045260246000fd5b6020026020010160006001600160a01b03168152505b80610a7881612c5b565b9150506109d3565b506001600160a01b0383166000908152600560205260408120865183929088906001600160801b038716908110610ac757634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166001600160a01b031681526020019081526020016000209080519060200190610b02929190612450565b50505b80610b0f81612c5b565b9150506108dd565b50508080610b2490612c5b565b915050610893565b505050508080610b3b90612c82565b91505061075e565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610bd25760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016106b5565b60008211610c225760405162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f766572000060448201526064016106b5565b604051339083156108fc029084906000818181858888f19350505050158015610c4f573d6000803e3d6000fd5b506040518281526000907f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28906020015b60405180910390a25050565b6001600160a01b038083166000908152600560209081526040808320938516835292815290829020805483518184028101840190945280845260609392830182828015610d0157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610ce3575b5050505050905092915050565b610d387f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab9582610611565b50565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610dca5760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016106b5565b6106366001600160a01b0384168360006115fb565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610e6e5760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016106b5565b81610ebb5760405162461bcd60e51b815260206004820152601460248201527f496e76616c6964206761732d657374696d61746500000000000000000000000060448201526064016106b5565b600182905560405182815230907ff43f23b7a28e6f8ce6843a21bd7b48bce778aa913b8c8cf459edf7d770e8d38a90602001610c7f565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff16610f815760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016106b5565b60008211610fd15760405162461bcd60e51b815260206004820152601e60248201527f59616b416461707465723a204e6f7468696e6720746f207265636f766572000060448201526064016106b5565b610fe56001600160a01b03841633846118ae565b826001600160a01b03167f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa288360405161102091815260200190565b60405180910390a2505050565b336106c8828261063b565b3360008181527fa54247010af6b3693b80aceddfad12e077c5de3571e6243fada502635f0d7d39602052604090205460ff166110c75760405162461bcd60e51b815260206004820152602860248201527f4d61696e7461696e61626c653a2043616c6c6572206973206e6f742061206d6160448201526734b73a30b4b732b960c11b60648201526084016106b5565b60005b8251816001600160801b0316101561063657600083826001600160801b03168151811061110757634e487b7160e01b600052603260045260246000fd5b602002602001015190506000816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b15801561114c57600080fd5b505afa158015611160573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111849190612768565b600354604051631f29a8cd60e31b8152600481018390529192506000916001600160a01b039091169063f94d46689060240160006040518083038186803b1580156111ce57600080fd5b505afa1580156111e2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261120a9190810190612661565b5050905060005b8151816001600160801b031610156113a257600082826001600160801b03168151811061124e57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b038781166000908152600484526040808220928416825291909352822080546fffffffffffffffffffffffffffffffff19166001600160801b03861617905591505b8351816001600160801b0316101561138d57806001600160801b0316836001600160801b03161461137b576001600160a01b0382166000908152600560205260408120855190919086906001600160801b03851690811061131457634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b0390811683528282019390935260409091016000908120805460018101825590825291902001805473ffffffffffffffffffffffffffffffffffffffff191691881691909117905561137b826000196118f7565b8061138581612c5b565b9150506112a3565b5050808061139a90612c5b565b915050611211565b5050505080806113b190612c5b565b9150506110ca565b6000828152602081905260409020600101546113d481611787565b610636838361182f565b610d387f339759585899103d2ace64958e37e18ccb0504652c81d4a1b8aa80fe2126ab95826113b9565b6040516370a0823160e01b81526001600160a01b038281166004830152600091908416906370a082319060240160206040518083038186803b15801561144d57600080fd5b505afa158015611461573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114859190612768565b905061149486868686866119a0565b6040516370a0823160e01b81526001600160a01b03838116600483015260009183918616906370a082319060240160206040518083038186803b1580156114da57600080fd5b505afa1580156114ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115129190612768565b61151c9190612bc6565b90508581101561156e5760405162461bcd60e51b815260206004820152601760248201527f496e73756666696369656e7420616d6f756e742d6f757400000000000000000060448201526064016106b5565b836001600160a01b0316856001600160a01b03167fe2bdbc6b7225eb0a972ac943c485a6cc05f7c6811838bce8903f23200fb744fa89896040516115bc929190918252602082015260400190565b60405180910390a350505050505050565b60006115da848484611c32565b90505b9392505050565b336115f0600083610611565b6106c860008261063b565b8015806116845750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561164a57600080fd5b505afa15801561165e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116829190612768565b155b6116f65760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084016106b5565b6040516001600160a01b0383166024820152604481018290526106369084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152611c9a565b610d388133611ddc565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166106c8576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556117eb3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff16156106c8576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6040516001600160a01b0383166024820152604481018290526106369084907fa9059cbb000000000000000000000000000000000000000000000000000000009060640161173b565b600354604051636eb1769f60e11b81523060048201526001600160a01b03918216602482015260009184169063dd62ed3e9060440160206040518083038186803b15801561194457600080fd5b505afa158015611958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197c9190612768565b90508181101561063657600354610636906001600160a01b038581169116846115fb565b60006119ac8484610c8b565b905060008151116119ff5760405162461bcd60e51b815260206004820152601560248201527f4e6f20706f6f6c7320666f72207377617070696e67000000000000000000000060448201526064016106b5565b6000611a0d8286868a611e5a565b5090506001600160a01b038116611a665760405162461bcd60e51b815260206004820152600e60248201527f556e646566696e656420706f6f6c00000000000000000000000000000000000060448201526064016106b5565b611ab26040805160c0810190915260008082526020820190815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001606081525090565b816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b158015611aeb57600080fd5b505afa158015611aff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b239190612768565b8152600060208083018290526001600160a01b0388811660408086019190915288821660608087019190915260808087018e9052825180840184526002815261060f60f31b8187015260a0880152825190810183529384018590528301939093523082528681168284015260035492517f52bbbe29000000000000000000000000000000000000000000000000000000008152919216906352bbbe2990611bd490859085908d9042906004016129b6565b602060405180830381600087803b158015611bee57600080fd5b505af1158015611c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c269190612768565b50505050505050505050565b6000831580611c525750816001600160a01b0316836001600160a01b0316145b15611c5f575060006115dd565b6000611c6b8484610c8b565b9050805160001415611c815760009150506115dd565b6000611c8f82868689611e5a565b979650505050505050565b600080836001600160a01b031683604051611cb591906128b9565b6000604051808303816000865af19150503d8060008114611cf2576040519150601f19603f3d011682016040523d82523d6000602084013e611cf7565b606091505b509150915081611d495760405162461bcd60e51b815260206004820181905260248201527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460448201526064016106b5565b805115611dd65780806020019051810190611d649190612730565b611dd65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016106b5565b50505050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166106c857611e18816001600160a01b0316601461200e565b611e2383602061200e565b604051602001611e349291906128d5565b60408051601f198184030181529082905262461bcd60e51b82526106b5916004016129a3565b600080805b8651816001600160801b0316101561200457600087826001600160801b031681518110611e9c57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060006001600160a01b0316816001600160a01b03161415611ec75750611ff2565b604080516101208101825260008082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820192909252610100810191909152816001600160a01b03166338fff2d06040518163ffffffff1660e01b815260040160206040518083038186803b158015611f4b57600080fd5b505afa158015611f5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f839190612768565b608082015260008082526001600160a01b038981166020808501919091529089166040808501919091526060840189905280518082019091526002815261060f60f31b91810191909152610100830152611fdd8284612235565b905084811115611fee578094508295505b5050505b80611ffc81612c5b565b915050611e5f565b5094509492505050565b6060600061201d836002612ba7565b612028906002612b8f565b67ffffffffffffffff81111561204e57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612078576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106120bd57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053507f78000000000000000000000000000000000000000000000000000000000000008160018151811061211657634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600061213a846002612ba7565b612145906001612b8f565b90505b60018111156121e6577f303132333435363738396162636465660000000000000000000000000000000085600f166010811061219457634e487b7160e01b600052603260045260246000fd5b1a60f81b8282815181106121b857634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936121df81612c09565b9050612148565b5083156115dd5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016106b5565b6003546080830151604051631f29a8cd60e31b815260009283926001600160a01b039091169163f94d4668916122719160040190815260200190565b60006040518083038186803b15801561228957600080fd5b505afa15801561229d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526122c59190810190612661565b506001600160a01b0380861660009081526004602090815260408083208a830151909416835292905290812054825192945090925083916001600160801b0390911690811061232457634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b0380871660009081526004845260408082208a820151909316825291909352822054845191935084916001600160801b0390911690811061238857634e487b7160e01b600052603260045260246000fd5b6020026020010151905061239e868383886123a8565b9695505050505050565b6040517f9d2c110c0000000000000000000000000000000000000000000000000000000081526000906001600160a01b03831690639d2c110c906123f490889088908890600401612a73565b60206040518083038186803b15801561240c57600080fd5b505afa92505050801561243c575060408051601f3d908101601f1916820190925261243991810190612768565b60015b61244557612448565b90505b949350505050565b8280548282559060005260206000209081019282156124b2579160200282015b828111156124b2578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03909116178255602090920191600190910190612470565b506124be9291506124c2565b5090565b5b808211156124be57600081556001016124c3565b600082601f8301126124e7578081fd5b815160206124fc6124f783612b6b565b612b3a565b80838252828201915082860187848660051b890101111561251b578586fd5b855b858110156125395781518452928401929084019060010161251d565b5090979650505050505050565b600060208284031215612557578081fd5b81356115dd81612cc9565b60008060408385031215612574578081fd5b823561257f81612cc9565b9150602083013561258f81612cc9565b809150509250929050565b600080604083850312156125ac578182fd5b82356125b781612cc9565b946020939093013593505050565b600060208083850312156125d7578182fd5b823567ffffffffffffffff8111156125ed578283fd5b8301601f810185136125fd578283fd5b803561260b6124f782612b6b565b80828252848201915084840188868560051b870101111561262a578687fd5b8694505b8385101561265557803561264181612cc9565b83526001949094019391850191850161262e565b50979650505050505050565b600080600060608486031215612675578081fd5b835167ffffffffffffffff8082111561268c578283fd5b818601915086601f83011261269f578283fd5b815160206126af6124f783612b6b565b8083825282820191508286018b848660051b89010111156126ce578788fd5b8796505b848710156126f95780516126e581612cc9565b8352600196909601959183019183016126d2565b5091890151919750909350505080821115612712578283fd5b5061271f868287016124d7565b925050604084015190509250925092565b600060208284031215612741578081fd5b815180151581146115dd578182fd5b600060208284031215612761578081fd5b5035919050565b600060208284031215612779578081fd5b5051919050565b60008060408385031215612792578182fd5b82359150602083013561258f81612cc9565b6000602082840312156127b5578081fd5b81356001600160e01b0319811681146115dd578182fd5b6000806000606084860312156127e0578081fd5b8335925060208401356127f281612cc9565b9150604084013561280281612cc9565b809150509250925092565b600080600080600060a08688031215612824578283fd5b8535945060208601359350604086013561283d81612cc9565b9250606086013561284d81612cc9565b9150608086013561285d81612cc9565b809150509295509295909350565b60008151808452612883816020860160208601612bdd565b601f01601f19169290920160200192915050565b600281106128b557634e487b7160e01b600052602160045260246000fd5b9052565b600082516128cb818460208701612bdd565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161290d816017850160208801612bdd565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161294a816028840160208801612bdd565b01602801949350505050565b6020808252825182820181905260009190848201906040850190845b818110156129975783516001600160a01b031683529284019291840191600101612972565b50909695505050505050565b6020815260006115dd602083018461286b565b60e08152845160e0820152600060208601516129d6610100840182612897565b5060408601516001600160a01b03908116610120840152606087015116610140830152608086015161016083015260a086015160c0610180840152612a1f6101a084018261286b565b915050612a6160208301866001600160a01b03808251168352602082015115156020840152806040830151166040840152506060810151151560608301525050565b60a082019390935260c0015292915050565b60608152612a85606082018551612897565b60006020850151612aa160808401826001600160a01b03169052565b5060408501516001600160a01b03811660a084015250606085015160c0830152608085015160e083015260a0850151610100818185015260c08701519150610120612af6818601846001600160a01b03169052565b60e08801516001600160a01b0316610140860152908701516101608501919091529050612b2761018084018261286b565b6020840195909552505060400152919050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612b6357612b63612cb3565b604052919050565b600067ffffffffffffffff821115612b8557612b85612cb3565b5060051b60200190565b60008219821115612ba257612ba2612c9d565b500190565b6000816000190483118215151615612bc157612bc1612c9d565b500290565b600082821015612bd857612bd8612c9d565b500390565b60005b83811015612bf8578181015183820152602001612be0565b83811115611dd65750506000910152565b600081612c1857612c18612c9d565b506000190190565b600181811c90821680612c3457607f821691505b60208210811415612c5557634e487b7160e01b600052602260045260246000fd5b50919050565b60006001600160801b0380831681811415612c7857612c78612c9d565b6001019392505050565b6000600019821415612c9657612c96612c9d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610d3857600080fdfea2646970667358221220480729bb7d86aac270d3af2f7c609ddbe066f548b13a3b2223c34b0fc518245c64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "src/contracts/adapters/BalancerV2Adapter.sol:BalancerV2Adapter",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 1451,
        "contract": "src/contracts/adapters/BalancerV2Adapter.sol:BalancerV2Adapter",
        "label": "swapGasEstimate",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1453,
        "contract": "src/contracts/adapters/BalancerV2Adapter.sol:BalancerV2Adapter",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3934,
        "contract": "src/contracts/adapters/BalancerV2Adapter.sol:BalancerV2Adapter",
        "label": "vault",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3940,
        "contract": "src/contracts/adapters/BalancerV2Adapter.sol:BalancerV2Adapter",
        "label": "poolToTokenIndex",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint128))"
      },
      {
        "astId": 3947,
        "contract": "src/contracts/adapters/BalancerV2Adapter.sol:BalancerV2Adapter",
        "label": "tokensToPools",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_array(t_address)dyn_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address[]))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint128))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint128))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint128)"
      },
      "t_mapping(t_address,t_uint128)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint128)",
        "numberOfBytes": "32",
        "value": "t_uint128"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "src/contracts/adapters/BalancerV2Adapter.sol:BalancerV2Adapter",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "src/contracts/adapters/BalancerV2Adapter.sol:BalancerV2Adapter",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}